#include <glm/gtx/quaternion.hpp>

glm::quat qRotation;	// This ISN'T in Euler angles
// This OVERWRITES the current angle
void setRotationFromEuler( glm::vec3 newEulerAngleXYZ )
{
	this->qRotation = glm::quat(newEulerAngleXYZ);
}

// This one updates ("adds") to the current angle
void adjustRoationAngleFromEuler( glm::vec3 EulerAngleXYZ_Adjust )
{
	// To combine quaternion values, you multiply them together
	// Make a quaternion that represents that CHANGE in angle
	glm::quat qChange = glm::quat(EulerAngleXYZ_Adjust);
	// Multiply them together to get the change
	this->qRotation *= qChange;

//		// This is the same as this
//		this->qRotation = this->qRotation * qChange;
}



glm::mat4 matQRotation = glm::mat4(pCurrentMeshObject->qRotation);
